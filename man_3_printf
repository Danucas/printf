.TH _printf3
.SH NAME
.B _printf \- format and print data
.SH SYNOPSIS
.B #include "holberton.h"
.br
.B int _printf(const char *format, ...);
.B int _put(char c);
.B int print_char(va_list *, int);
.B int print_string(va_list *, int);
.B int print_decimal(va_list *, int);
.B int print_percent(va_list *, int);
.B int print(va_list *, int);
.B int (*handler(char c))(va_list *, int);
.B char *_tostring(int n);

Feature Test Macro Requirements

typedef struct printers
{
	char joker;
	int (*fun)(va_list *, int);
} print_t;
print_t *get_funs();

.SH DESCRIPTION
       The functions choosen by the handler write the output under the control
       of a format string that specifies how subsequent arguments (or arguments
       accessed via the variable-length argument facilities of stdarg(3)) are
       converted for output.

.PP Flag Characters
.PP The character % is followed by zero or more of the following flags:

.PP c   The function go to check the arguments that has been casted to integers
    gets the value.

.PP s   The function go to check the arguments and check that return isn't a NULL
    pointer.

.PP d,i The function handler the limits cases for when the value is overflow 
    the limits.

.PP %   Print a percent digit.

.PP f   The double argument is rounded and converted to decimal nota‐
    tion in the style [-]ddd.ddd, where the number of digits after
    the decimal-point character is equal to the precision specifi‐
    cation.  If the precision is missing, it is taken as 6; if the
    precision is explicitly zero, no decimal-point character
    appears.  If a decimal point appears, at least one digit
    appears before it.

.PP g   he precision specifies the number of significant digits.  If the precision
    is missing, 6 digits are given; if the precision is zero, it is treated as
    1.  Style e is used if the exponent from its conversion is less than -4 or
    greater than or equal to the precision.  Trailing zeros are removed from
    the fractional part of the result; a decimal point appears only if it is
    followed by at least one digit.

.PP o,x The unsigned int argument is converted to unsigned octal (o), unsigned
    decimal (u), or unsigned hexadecimal (x and X) nota‐tion.  The letters
    abcdef are used for x conversions; the let‐ters ABCDEF are used for X
    conversions.  The precision, if any, gives the minimum number of digits
    that must appear; if the converted value requires fewer digits, it is
    padded on the left with zeros.  The default precision is 1.  When 0 is
    printed with an explicit precision 0, the output is empty.

.PP e   The double argument is rounded and converted in the style [-]d.ddde±dd
    where there is one digit (which is nonzero if the argument is nonzero)
    before the decimal-point character and the number of digits after it is
    equal to the precision; if the precision is missing, it is taken as 6;
    if the precision is zero, no decimal-point character appears.  An E
    conversion uses the letter E (rather than e) to introduce the exponent.
    The exponent always contains at least two digits; if the value
    is zero, the exponent is 00.

.SH RETURN VALUE
    The function Return the length of the printed data if the program run
    succesfully and Return -1 if it is wrong.

.SH EXAMPLES

    For example to print int values, we went to use the 'd' flag, the
    program should return the length of the characters that it just print.
    So, when we print the length variable we can know the buffer that we just
    send to the stdout.

    len = _printf("%d\n", 1);
    _printf("Length:[%d, %i]\n", len, len);

    The first line print the number1
    The second line prints two, 1-) for the length of the number
    and 2-) for the new line.


.SH SEE ALSO

    printf(1), asprintf(3), puts(3), scanf(3), setlocale(3), strfromd(3),
    wcrtomb(3), wprintf(3), locale(5)

.SH COLOPHON

    This page is for documenting the project "printf" for Holberton School
    requirements.

    You can chechk the code in
    github.com/danrocus1994/printf

    Follow us on tweeter as...
    @Danucas1 @ccali_k